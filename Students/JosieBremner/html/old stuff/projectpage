<p>This is my project page. I am going to study html and CSS coding by taking a course.
Since I am new this year I was not able to help set up the class website but I worked on making my page, so it could be on the class website. I learned how git hub works and how to connect my coding in sublime to my website. I will next be taking a html and CSS course to learn how to code in html and CSS. I will be taking the course from the Odin Project. My goal is have completed and understand the course by before Thanksgiving break. My overall goal will to be completing the Odin Project by the end of the semester. My teachback will be about the how HTML and CSS differ but at the same time how they work together. </p>
<p><b>First:</b></p>
<p>I will take the lessons on Git Basics which consist of 2 lessons. 
Deadline - 11/1/21</p>

<p><b>Second: </b></p>
<p>I will take the lessons on HTML Foundations which consist of 6 lessons and 1 project
Deadline - 11/11/21</p>

<p><b>Third:</b></p>
<p>I will take the lessons on CSS Foundations which consist of 4 lessons.
Deadline - 11/22/21</p>

<p><b>Takeaways from: Introduction to Git and Git Basics</b></p>
<p>Introduction to Git (history of git, what it is, and what it is useful for): Git is basically a save button for files and directories. In short, it is a version control system. For example, if you save something in a text editor in a document, they are saved into a single file. There is only one automatic copy of the file unless you go personally to make copies. Save in github = recorded differences in files and folders AND keeps a historical record of each save. When connected to a network, you can push your project to github to share and collaborate with other developers (like what we do as a class to share our work). Git is an essential skill for modern web developers. Git is local and GitHub is remote wehere everything ends up. </p>
<p>Git Basics (10/28/21): I learned the common Git commands that are needed to manage projects and to upload finalized work onto Github. These commands are known as the <b>basic Git workflow </b>. The difference between the git_test ripositiory I made and the APW1 ripository is that the APW1 is connected to a 3rd party/shared and is set up to be a webpage to (which is exaclty what you are reading right now. In the first couple of steps of Git Basics I have set up a new respitory inside my GitHub and put that in a new directory called Repos. The name “origin” is both the default and the convention for the remote repository. </p>

<p><b>Takeaways from: HTML Foundations</b></p>
<p>Introduction to HTML and CSS (11/4/21): HTML and CSS are two langague that wok cohesivley to create pretty much everything you see when looking at something on the internet. HTML is raw data that makes up a webpage. CSS is the cosmetic design/style to those elements that make up the webpage. There both are not technically programming languages because their purpose is to present information not make information. Although, the formation of any website will need HTML, CSS, AND Javascript. Javsscript increases interactivity. </p>
<p>Elements and Tags (11/12/21): HTML elements are used to make all the paragraphs, headings, lists, images, and links that can be seen on a website. Elements are connected to tags because elements are pieces of content in the opening and closing HTML tags. The opening tag tells the browser where the start of an HTML element is, made out of a keyword enclosed in angle brackets. The closing tag does the opposite, telling the browser where the element ends. For this there is a forward slash before the keyword placed in between the angled brackets. The elements are the condaments of a sandwich while the tags are the bread. Although, there are some HTML elements that do not have to have a closing tag, they are known as empty elements. Using the correct tags impact how the site is ranked in search engines and how accesible they are to users who rely on assistive technologies. Using the correct elements for content is, semantic HTML. </p>
<p>HTML Boilerplate (11/18/21): All HTML documents have a boilerplate that needs to be in place in order for anything useful to happen. In this lesson, first I made a new folder in my computer and names it html-boilerplate. Inside this folder I created a new file and named it index.html. For the computer to know we want the file to be an HTML file we append the filename with the .html extension. All HTML page begins with a doctype declaration. The purpose of this is to tell the browser the type of HTML that is needed to render the document. The most recent and up to date doctype for the version of the lastest HTML is opening tag !DOCTYPE html >. Then I added opening tag !DOCTYPE html > to the index.html file created earlier to the very first line in my text editor. After the doctype is declared and opening tag html > is provided, the root element of the document. Every element in that document will stem from that. To be able to view HTML files in the browser you can either: drag and drop an HTML file from the text editor intp the address bar of a browser, find the HTML file in your file system and double click (this is what I do the most), or can use terminal to open the file in your browser. The purpose of the head element is where importanr meta-information about our webpages. The stuff in the head element will not be displayed to the user. The purpose of the body element is where all the content that will be displayed to users will go. </p>
<p>Working With Text (12/2/21): The majority of content online is text-based. This is why HTML text elements are vital. When a browser comes across new lines in you HTML it compresses them them down into one single paragraph. The text will appear clumped together in one line. To create paragraphs in HTML, the paragraph element must be used. This will add a newline after each block of text (paragraph). You must use the opeing paragraph tag and the closing tag to acheive this (< p > and < / p > (do not include the spaces inbetween the characters)). Creating headings are different from other HTML text elements; they are larger and bolder then the rest of the text. There are 6 different sizes of headings (< h 1 > to < h 6 > (with out the spaces inbetween characters)). There needs to be an opening and closing tag just like we explained for the paragraphs. <strong> To make text bold you have to use < strong > (without the spaces). Bolding helps provide emphises on the importance of the text.  </strong> The <em> < e m > tag makes text italic, but you also need an opeing and closing tag. </em> A nesting element is where there are indents with any elements that are within other elements. This creates a parent child relationship between the two elements. HTML parent elements can only have so many children, this means the child elements are siblings to one another. HTML comments cannot be seen by the viewer; they allow the coder to put in notes on the code. All you need to wrap your comments in are < ! - - and - - > (without the spaces). </p>
<p> Lists (12/9/21): Lists are present everywhere on the web. In HTML there are a couple of different types of lists avaliable to use. A list where the items don't need to be in order, an unordered list would be best to use in this situation. To create an unordered list, there needs to be a < u l > element and each item withing the list is made using the list tiem element < l i >. Each item in this type of list will show up beginning with a bullet point. A list where order of the item does matter is an ordered list. Ordered lists are usually used for recipes, top 10 of something, etc.. Using the < o l > element ordered lists are created. Within, each item is created using the list item element is < l i >. In this list, each list item will begin with a number instead of a bullet point. </p>
<p> Links and Images (12/17/21): Links are a special feature of HTML. They help us link to more HTML pages on the web. The reason the web is called the web is because it is multiple HTML pages connected to each other with links. Here I learned how to create links and add some extra visual details through embedding images. I had to create a new directory names odin-links-and -images. Within that I created a new file named index.html. I filled in the usual HTML boiler plate (talked about in the boilerplate section). And then I added an h1 heading that said "Homepage" to the body. In order to create a link in HTML, an anchor element is used. To create an anchor tag you have to wrap text or another HTML element with a < a > tag. In order for it to work though we have ti tell it a destination to go to. This is accomplished by using an HTML attribute. An HTML attribute gives extra information to an HTML element and has to go in the element's opening tag. Attributes consist of a name and a value. An href (hyperlink reference) attribute needs to be added to the opening anchor tag. When the href attribute is present, the browser will turn the text blue and underline it to show it is a link. The two kinds of links generally created are links to pages of other websites on the internet and links to pages located on your own website. Absolute links are links to pages on other websites on the internet. A regular absolute link will be made of: protocol://domain/path. It will always contain the protocal and domain of the destintation. Links to other pages within your own website are relative links. They do not include the domain name. It is assumed that the domain name is the same as the page the link was created on. To creat an image in HTML an < img > element is used, it does not need a closing tag. </p>
<p><b>Takeaways from: CSS Foundations</b></p>
<p>CSS Foundations (1/27/22): To make a structure, made from HTML of a webpage look good CSS is used. CSS is made of various rules. The rules are made of a selector and a semi-colon list with declarations that are made up of a property:value pair. Selectors refer to the HTML elements which CSS rules apply to. They are what is literally being selected for each rule. The universal selector selects elements of any type, the syntax for it is a asterisk (*). A type selector will select all the elements of the element type. The syntax for it is the name of the element if < div > then it is div. Class selectors select all elements with the given class. The syntax is a period and then without a space followed by case-sensitive value of the class attribute. ID selectors select an element with the given ID (that is another attribute placed on an HTML element). An ID cannot be repeated on a single page. Grouping Selectors are for when two groups of element share some of their style declarations. Chaining selectors work as a list without any seperation. Descendant combinator is represented in CSS by a single space between selectors. A combinator allows to combine multiple selectors in a different way than grouping or chaining them. They show a relationship between the selectors. A descendant combinator will only cause elements that match the last selector to be selected if they have an ansector that matches that previous selector. There are multipule CSS properties, here are some. Color and background-color, the color property sets and element's text color while the background-color sets the background color of an element. They use the word of an actual color but also accept HEX, RGB, and HSL values. Typography basics and text-align are in charge of the fonts of text. Image Height and width are in charge of controling the size of an image. A CSS declaration that is more specific will take over ones that are less specific. Selectors that contribute to specificity are ID selectors, Class selectors, and Type selectors.. </p>